#!/bin/sh

#
# Copyright (c) 2011 Pedro Algarvio
# Copyright (c) 2010 Kah Seng Tay - Gitolite modifications
#
# Copyright (c) 2009 Jakob Skjerning - Original
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
#
# Originaly found on the redmine_gitolite_hook:
#   https://github.com/kahseng/redmine_gitolite_hook



HOOK_URL=gitolite_hook
FETCH_URL=sys/fetch_changesets

DEFAULT_CURL_IGNORE_SECURITY_CFG="false"

PROGNAME=$(basename $0)


DEBUG=$(git config --bool hooks.redmine_gitolite.debug 2>/dev/null)
if [ -z "$DEBUG" ]; then
	DEBUG="false"
fi

clean_exit() {
	log "${PROGNAME}: ${1:-'Unknown Error'}"
	exit 0
}

log() {
	if [ "$DEBUG" = "true" ]; then
		echo $1  1>&2
	fi
}
log_n() {
	if [ "$DEBUG" = "true" ]; then
		echo -n $1  1>&2
	fi
}

log "Running ${PROGNAME} for repository ${GL_REPO}"

KEY=$(git config hooks.redmine_gitolite.key 2>/dev/null)
if [ -z "$KEY" ]; then
	clean_exit "Repository ${GL_REPO} does not have \"hooks.redmine_gitolite.key\" set. Skipping..."
fi

REDMINE_SERVER=$(git config hooks.redmine_gitolite.server 2>/dev/null)
if [ -z "$REDMINE_SERVER" ]; then
		clean_exit "Repository ${GL_REPO} does not have \"hooks.redmine_gitolite.server\" set. Skipping..."
fi

REDMINE_PROJECT_ID=$(git config hooks.redmine_gitolite.projectid 2>/dev/null)
if [ -z "$REDMINE_PROJECT_ID" ]; then
	clean_exit "Repository ${GL_REPO} does not have \"hooks.redmine_gitolite.server\" set. Skipping..."
fi

CURL_IGNORE_SECURITY_CFG=$(git config --bool hooks.redmine_gitolite.curlignoresecurity 2>/dev/null)
if [ -z "$CURL_IGNORE_SECURITY_CFG" ]; then
		CURL_IGNORE_SECURITY_CFG=$DEFAULT_CURL_IGNORE_SECURITY_CFG
fi

case "$CURL_IGNORE_SECURITY_CFG" in
		true)
				CURL_IGNORE_SECURITY=" -k "
				;;
		false)
				CURL_IGNORE_SECURITY=" "
				;;
esac

log ""
log "Notifying ChiliProject/Redmine (${REDMINE_SERVER}) about changes to this repo (${GL_REPO} => ${REDMINE_PROJECT_ID})"
log ""

refs=""
while read old new refname; do
	refs="$refs&refs[]=$old,$new,$refname"
done

log "Hitting the ChiliProject/Redmine Gitolite hook for $old $new $refname"
log_n "Response: "
r=$(curl $CURL_IGNORE_SECURITY -S -s -d "&project_id=$REDMINE_PROJECT_ID&key=$KEY${refs}" "http://$REDMINE_SERVER/sys/hooks/post-receive")
log "$r"
log ""

log "Complete"
exit 0
